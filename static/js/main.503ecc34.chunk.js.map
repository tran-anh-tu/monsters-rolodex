{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","m","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHTC,G,MAAW,SAAAR,GACtB,OAAO,qBAAKC,UAAU,YAAf,SAELD,EAAMS,SAASC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAiBP,QAASO,GAAfA,EAAEN,WCJ5BO,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,uBACEb,UAAU,SACVc,KAAK,SACLC,YAAaH,EACbI,SAAUH,MCiCCI,E,kDAnCb,aAAe,IAAD,8BACZ,gBAQFJ,aAAe,SAAAK,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAPrC,EAAKC,MAAQ,CACXf,SAAU,GACVY,YAAa,IALH,E,qDAad,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAAUoB,S,oBAG5C,WAAU,IAAD,EACyBC,KAAKN,MAA9Bf,EADA,EACAA,SAAUY,EADV,EACUA,YACXU,EAAmBtB,EAASuB,QAAO,SAAArB,GAAC,OAAIA,EAAEL,KAAK2B,cAAcC,SAASb,EAAYY,kBACxF,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEY,YAAY,iBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUL,SAAUsB,W,GA9BVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.503ecc34.chunk.js","sourcesContent":["import React from \"react\"\nimport \"./card.styles.css\"\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set1&size=180x180`}></img>\n    <h1>{props.monster.name}</h1>\n    <p>{props.monster.email}</p>\n  </div>\n)","import React from \"react\"\nimport { Card } from \"../card/card.component\"\nimport \"./card-list.styles.css\"\n\nexport const CardList = props => {\n  return <div className=\"card-list\">\n  {\n    props.monsters.map(m => <Card key={m.id} monster={m} />)\n  }\n  </div>\n}","import React from \"react\"\nimport \"./search-box.styles.css\"\n\nexport const SearchBox = ({placeHolder, handleChange}) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeHolder}\n    onChange={handleChange}\n  />\n)","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n\n  handleChange = e => {\n    this.setState({searchField: e.target.value})\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(res => res.json())\n      .then(users => this.setState({monsters: users}))\n  }\n\n  render() {\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(m => m.name.toLowerCase().includes(searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeHolder=\"search monster\"\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}